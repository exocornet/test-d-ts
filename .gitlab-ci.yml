stages:
  - lint
  - build
  - deploy


lint:
  stage: lint
  image: node:current-alpine3.19
  before_script:
    - apk add git
  script:
    - npm ci
    - npm run lint
  only:
    - merge_requests
    - develop
    - main

build:
  stage: build
  image: docker:24.0.5
  tags:
    - Docker_Runner
  services:
    - docker:24.0.5-dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD registry.zaryad.tech
    - docker build --build-arg ENV_ARG="$ENV_PROD_ARG" -t registry.zaryad.tech/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/$CI_COMMIT_REF_SLUG.$CI_PROJECT_NAME .
    - docker push registry.zaryad.tech/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/$CI_COMMIT_REF_SLUG.$CI_PROJECT_NAME
  only:
    - main

build_develop:
  stage: build
  image: docker:24.0.5
  tags:
    - Docker_Runner
  services:
    - docker:24.0.5-dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD registry.zaryad.tech
    - docker build --build-arg ENV_ARG="$ENV_DEV_ARG" -t registry.zaryad.tech/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/$CI_COMMIT_REF_SLUG.$CI_PROJECT_NAME .
    - docker push registry.zaryad.tech/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/$CI_COMMIT_REF_SLUG.$CI_PROJECT_NAME
  only:
    - develop

deploy_develop:
  stage: deploy
  image: alpine
  tags:
    - Docker_Runner
  before_script:
    - apk add openssh-client git
    - eval $(ssh-agent -s)
    - echo "${SSH_KEY}" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
  script:
    - ssh -o StrictHostKeyChecking=no zaryad@$SSH_HOST "cd $REMOTE_PATH && docker login $CI_REGISTRY -u $CI_REGISTRY_USER  --password-stdin <<<$CI_JOB_TOKEN && docker pull registry.zaryad.tech/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/$CI_COMMIT_REF_SLUG.$CI_PROJECT_NAME && if docker ps -a| grep $CI_COMMIT_REF_SLUG.$CI_PROJECT_NAME; then docker stop $CI_COMMIT_REF_SLUG.$CI_PROJECT_NAME && docker container rm $CI_COMMIT_REF_SLUG.$CI_PROJECT_NAME ; fi && docker run -p 3001:3000 --restart always --name $CI_COMMIT_REF_SLUG.$CI_PROJECT_NAME -d registry.zaryad.tech/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/$CI_COMMIT_REF_SLUG.$CI_PROJECT_NAME"
    - ssh -o StrictHostKeyChecking=no zaryad@$SSH_HOST "cd $REMOTE_PATH && docker system prune -f"
  only:
    - develop

deploy:
  stage: deploy
  image: alpine
  tags:
    - Docker_Runner
  before_script:
    - apk add openssh-client git
    - eval $(ssh-agent -s)
    - echo "${SSH_KEY}" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
  script:
    - ssh -o StrictHostKeyChecking=no zaryad@$SSH_HOST "cd $REMOTE_PATH && docker login $CI_REGISTRY -u $CI_REGISTRY_USER  --password-stdin <<<$CI_JOB_TOKEN && docker pull registry.zaryad.tech/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/$CI_COMMIT_REF_SLUG.$CI_PROJECT_NAME && if docker ps -a| grep $CI_COMMIT_REF_SLUG.$CI_PROJECT_NAME; then docker stop $CI_COMMIT_REF_SLUG.$CI_PROJECT_NAME && docker container rm $CI_COMMIT_REF_SLUG.$CI_PROJECT_NAME ; fi && docker run -p 3000:3000  --restart always --name $CI_COMMIT_REF_SLUG.$CI_PROJECT_NAME -d registry.zaryad.tech/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/$CI_COMMIT_REF_SLUG.$CI_PROJECT_NAME"
    - ssh -o StrictHostKeyChecking=no zaryad@$SSH_HOST "cd $REMOTE_PATH && docker system prune -f"
  only:
    - main
